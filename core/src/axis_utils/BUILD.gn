#
# Copyright Â© 2025 Agora
# This file is part of APTIMA Framework, an open source project.
# Licensed under the Apache License, Version 2.0, with certain conditions.
# Refer to the "LICENSE" file in the root directory for more information.
#
import("//build/axis_runtime/feature/combine_static_library.gni")
import("//build/axis_utils/options.gni")
import("//build/axis_utils/utils.gni")
import("//third_party/jansson/output_libs.gni")
import("//third_party/libuv/output_libs.gni")

axis_utils_glob("axis_utils_files") {
  deps = [
    "container",
    "sanitizer",
    "schema",
  ]

  if (axis_utils_enable_io) {
    deps += [ "io" ]
  }

  if (axis_utils_enable_backtrace) {
    deps += [ "backtrace" ]
  }

  if (axis_utils_enable_lib) {
    deps += [ "lib" ]
  }

  if (axis_utils_enable_log) {
    deps += [ "log" ]
  }

  if (axis_utils_enable_value) {
    deps += [ "value" ]
  }
}

static_library("axis_utils_static") {
  deps = [ ":axis_utils_files" ]
  complete_static_lib = true
  public_configs = [ "//build/axis_utils:utils_public_config" ]
  configs += [ "//build/axis_utils:utils_private_config" ]
}

shared_library("axis_utils_shared") {
  output_name = "axis_utils"

  deps = [ ":axis_utils_files" ]
  configs += [ "//build/axis_utils:utils_private_config" ]

  public_deps = [ "//third_party/jansson" ]
  public_configs = [ "//build/axis_utils:utils_public_config" ]

  if (is_mac) {
    ldflags = [
      # Enable the executable to look in the current directory for shared
      # library.
      "-Wl,-rpath,@loader_path",

      # Enable the executable to look in 'lib/' for shared library.
      "-Wl,-rpath,@loader_path/../lib/",

      "-Xlinker",
      "-install_name",
      "-Xlinker",
      "@rpath/libaxis_utils.dylib",
    ]
  } else if (is_linux) {
    ldflags = [
      # Enable the executable to look in the current directory for shared
      # library.
      "-Wl,-rpath=\$ORIGIN",

      # Enable the executable to look in '<parent-folder>/lib/' for shared
      # library.
      "-Wl,-rpath=\$ORIGIN/../lib/",
    ]
  } else {
    if (!defined(ldflags)) {
      ldflags = []
    }
  }
}

axis_utils_group("axis_utils") {
  public_deps = [ ":axis_utils_shared" ]
}

# Although axis_utils_static uses 'complete_static_lib = true', this
# functionality requires that all other dependencies bound to axis_utils_static
# be managed by GN as source_set or static_library targets. However, jansson and
# libuv are managed by CMake, and GN only calls CMake through an action to
# complete the compilation process. Therefore, it doesn't know which source
# files are involved or which object files are generated. As a result,
# 'complete_static_lib = true' has no effect, and the results of the CMake
# projects need to be manually bound to the axis_utils_static library.
combine_static_library("axis_utils_combined_static") {
  jansson_static = filter_include(jansson_output_libs,
                                  [
                                    "*.a",
                                    "*.lib",
                                  ])
  assert(jansson_static != [], "No jansson static library found.")

  libuv_static = filter_include(libuv_output_libs,
                                [
                                  "*.a",
                                  "*.lib",
                                ])
  assert(libuv_static != [], "No libuv static library found.")

  utils_static = ""
  if (is_win) {
    utils_static = "${root_out_dir}/obj/core/src/axis_utils/axis_utils_static.lib"
  } else {
    utils_static =
        "${root_out_dir}/obj/core/src/axis_utils/libaxis_utils_static.a"
  }

  # The utils_static should be the first item in the list.
  libraries = [
    utils_static,
    jansson_static[0],
    libuv_static[0],
  ]

  deps = [
    ":axis_utils_static",
    "//core/src/axis_rust:asan_config",
  ]
}
