//
// This file is part of APTIMA Framework, an open source project.
// Licensed under the Apache License, Version 2.0.
// See the LICENSE file for more information.
//
#include "axis_runtime/binding/cpp/aptima.h"

namespace {{package_name}} {

class {{package_name}}_t : public aptima::extension_t {
 public:
  explicit {{package_name}}_t(const char *name) : extension_t(name) {}

  void on_init(aptima::axis_env_t &axis_env) override {
    // Do some initializes.
    axis_env.on_init_done();
  }

  void on_start(aptima::axis_env_t &axis_env) override { axis_env.on_start_done(); }

  void on_cmd(aptima::axis_env_t &axis_env,
              std::unique_ptr<aptima::cmd_t> cmd) override {
    // Receive cmd from aptima graph.
    // You can write your logic here.

    // This is just a demo.
    auto cmd_result = aptima::cmd_result_t::create(axis_STATUS_CODE_OK);
    cmd_result->set_property("detail", "This is a demo");
    axis_env.return_result(std::move(cmd_result), std::move(cmd));
  }

  void on_data(aptima::axis_env_t &axis_env,
               std::unique_ptr<aptima::data_t> data) override {
    // Receive data from aptima graph.
  }

  void on_audio_frame(aptima::axis_env_t &axis_env,
                    std::unique_ptr<aptima::audio_frame_t> frame) override {
    // Receive audio frame from aptima graph.
  }

  void on_video_frame(aptima::axis_env_t &axis_env,
                      std::unique_ptr<aptima::video_frame_t> frame) override {
    // Receive video frame from aptima graph.
  }

  void on_stop(aptima::axis_env_t &axis_env) override {
    // Extension stop.
    axis_env.on_stop_done();
  }
};

axis_CPP_REGISTER_ADDON_AS_EXTENSION({{package_name}}, {{package_name}}_t);

}  // namespace {{package_name}}
