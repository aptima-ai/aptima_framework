name: Build - linux ubuntu2204

on:
  release:
    types: [created]
  pull_request:
    types: [opened, synchronize, reopened]
    paths-ignore:
      - "tools/**"
      - "docs/**"
      - ".vscode/**"
      - ".devcontainer/**"
      - ".github/**"
      - "!.github/workflows/build_linux_ubuntu2204.yml"
      - "**.md"

jobs:
  build-linux-ubuntu2204:
    concurrency:
      group: build-linux-ubuntu2204-${{ github.head_ref }}-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ matrix.arch }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [debug, release]
        arch: [x64, x86]
        include:
          - compiler: gcc
            build_type: debug
            arch: x86
        exclude:
          - compiler: clang
            arch: x86
    container:
      image: ghcr.io/aptima-ai/axis_building_ubuntu2204
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: "0"
          submodules: "true"

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Update version
        run: |
          git config --global --add safe.directory $(pwd)
          python3 tools/version/update_version_in_axis_framework.py
          python3 tools/version/check_version_in_axis_framework.py

      - name: Set ulimit and sysctl
        run: |
          # Because there are concurrent test cases which involves many
          # concurrent socket connections, we need to enlarge the maximum number
          # of the opened file descriptor.
          ulimit -n 102400

          # Because there are concurrent test cases (in 'smoke' and
          # 'integration') which will create many concurrent connections
          # simutaneously, we increase the TCP listening backlog value to 8192.
          sysctl -w net.core.somaxconn=8192
        shell: bash

      - name: Install gcc-multilib and g++-multilib
        if: matrix.arch == 'x86'
        run: |
          apt-get update
          apt-get install -y gcc-multilib g++-multilib

      - name: Build
        run: |
          export PATH=$(pwd)/core/axis_gn:$PATH
          echo $PATH
          go env -w GOFLAGS="-buildvcs=false"
          go1.20.12 download
          rustup default nightly

          df -h .

          if [ "${{ matrix.arch }}" = "x86" ]; then
            EXTRA_ARGS="is_clang=false axis_enable_axis_manager=false axis_manager_enable_frontend=false axis_rust_enable_tests=false axis_manager_enable_tests=false axis_enable_go_binding=false axis_enable_python_binding=false axis_enable_nodejs_binding=false axis_manager_enable_frontend=false axis_enable_integration_tests_prebuilt=false"
          else
            EXTRA_ARGS="is_clang=${{ matrix.compiler == 'gcc' && 'false' || 'true' }} log_level=1 enable_serialized_actions=true axis_enable_serialized_rust_action=true axis_rust_enable_gen_cargo_config=false axis_enable_cargo_clean=true axis_enable_go_lint=true axis_enable_rust_incremental_build=false axis_manager_enable_frontend=false axis_enable_integration_tests_prebuilt=false"
          fi

          tgn gen linux x64 ${{ matrix.build_type }} -- $EXTRA_ARGS
          tgn build linux x64 ${{ matrix.build_type }}

          df -h .
          tree -I 'gen|obj' out

      - name: Run Tests (axis_utils_unit_test)
        env:
          ASAN_OPTIONS: detect_leaks=1:detect_stack_use_after_return=1:color=always:unmap_shadow_on_exit=1:abort_on_error=1
          MALLOC_CHECK_: 3
          axis_ENABLE_MEMORY_TRACKING: "true"
          axis_ENABLE_BACKTRACE_DUMP: "true"
        run: |
          chmod +x out/linux/x64/tests/standalone/axis_utils_unit_test
          out/linux/x64/tests/standalone/axis_utils_unit_test || { echo "test failed"; exit 1; }

      - name: Run Tests (axis_runtime_unit_test)
        env:
          ASAN_OPTIONS: detect_leaks=1:detect_stack_use_after_return=1:color=always:unmap_shadow_on_exit=1:abort_on_error=1
          MALLOC_CHECK_: 3
          axis_ENABLE_MEMORY_TRACKING: "true"
          axis_ENABLE_BACKTRACE_DUMP: "true"
        run: |
          chmod +x out/linux/x64/tests/standalone/axis_runtime_unit_test
          out/linux/x64/tests/standalone/axis_runtime_unit_test || { echo "test failed"; exit 1; }

      - name: Run Tests (axis_runtime_smoke_test)
        env:
          ASAN_OPTIONS: detect_leaks=1:detect_stack_use_after_return=1:color=always:unmap_shadow_on_exit=1:abort_on_error=1
          MALLOC_CHECK_: 3
          axis_ENABLE_MEMORY_TRACKING: "true"
          axis_ENABLE_BACKTRACE_DUMP: "true"
        run: |
          chmod +x out/linux/x64/tests/standalone/axis_runtime_smoke_test
          out/linux/x64/tests/standalone/axis_runtime_smoke_test || { echo "test failed"; exit 1; }

      - name: Run Tests (axis_rust standalone tests)
        if: matrix.arch == 'x64'
        env:
          ASAN_OPTIONS: detect_leaks=1:detect_stack_use_after_return=1:color=always:unmap_shadow_on_exit=1:abort_on_error=1
          MALLOC_CHECK_: 3
          axis_ENABLE_MEMORY_TRACKING: "true"
          axis_ENABLE_BACKTRACE_DUMP: "true"
        run: |
          cd out/linux/x64/tests/standalone/axis_rust

          chmod +x unit_test
          chmod +x integration_test

          ./unit_test || { echo "axis_rust unit test failed"; exit 1; }
          ./integration_test || { echo "axis_rust integration test failed"; exit 1; }

      - name: Run Tests (axis_manager standalone tests)
        if: matrix.arch == 'x64'
        env:
          ASAN_OPTIONS: detect_leaks=1:detect_stack_use_after_return=1:color=always:unmap_shadow_on_exit=1:abort_on_error=1
          MALLOC_CHECK_: 3
          axis_ENABLE_MEMORY_TRACKING: "true"
          axis_ENABLE_BACKTRACE_DUMP: "true"
        run: |
          cd out/linux/x64/tests/standalone/axis_manager

          chmod +x unit_test

          ./unit_test || { echo "axis_manager unit test failed"; exit 1; }

      - name: Install Python dependencies via script
        run: |
          python .github/tools/setup_pytest_dependencies.py

      - name: Run Tests (axis_manager pytest tests)
        if: matrix.arch == 'x64'
        env:
          ASAN_OPTIONS: detect_leaks=1:detect_stack_use_after_return=1:color=always:unmap_shadow_on_exit=1:abort_on_error=1
          MALLOC_CHECK_: 3
          axis_ENABLE_MEMORY_TRACKING: "true"
          axis_ENABLE_BACKTRACE_DUMP: "true"
        run: |
          cd out/linux/x64/
          pytest -s tests/axis_manager/

      - name: Run tests (axis_runtime integration tests)
        if: matrix.arch == 'x64'
        env:
          ASAN_OPTIONS: detect_leaks=1:detect_stack_use_after_return=1:color=always:unmap_shadow_on_exit=1:abort_on_error=1
          MALLOC_CHECK_: 3
          axis_ENABLE_MEMORY_TRACKING: "true"
          axis_ENABLE_BACKTRACE_DUMP: "true"
        run: |
          export PATH=$(pwd)/core/axis_gn:$PATH
          cd out/linux/x64/
          pytest -s tests/axis_runtime/integration/

      - name: Update supports before upload or publish
        if: matrix.arch == 'x64'
        run: |
          UPDATE_SUPPORTS_SCRIPT=$(pwd)/tools/supports/update_supports_in_manifest_json.py

          cd out/linux/x64/axis_packages
          ARRAY=(
            "system/axis_runtime"
            "system/axis_runtime_go"
            "system/axis_runtime_python"
            "addon_loader/python_addon_loader"
          )

          for item in "${ARRAY[@]}"; do
            python3 ${UPDATE_SUPPORTS_SCRIPT} --os-arch-pairs linux:x64 --input-file ${item}/manifest.json --output-file ${item}/manifest.json --log-level 1
            cat ${item}/manifest.json
          done
        shell: bash

      - name: Upload tman
        if: matrix.arch == 'x64'
        uses: actions/upload-artifact@v4
        with:
          name: tman-linux-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ matrix.arch }}
          path: out/linux/x64/axis_manager/bin/tman

      - name: Upload axis_packages
        if: matrix.arch == 'x64'
        uses: actions/upload-artifact@v4
        with:
          name: axis_packages-linux-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ matrix.arch }}
          path: |
            out/linux/x64/axis_packages/system/axis_runtime
            out/linux/x64/axis_packages/system/axis_runtime_go
            out/linux/x64/axis_packages/system/axis_runtime_python
            out/linux/x64/axis_packages/extension/default_extension_cpp
            out/linux/x64/axis_packages/extension/default_extension_go
            out/linux/x64/axis_packages/extension/default_extension_python
            out/linux/x64/axis_packages/extension/default_async_extension_python
            out/linux/x64/axis_packages/addon_loader/python_addon_loader

      - name: Package assets
        if: matrix.arch == 'x64' && startsWith(github.ref, 'refs/tags/')
        run: |
          cd out/linux/x64
          zip -vr tman-linux-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ matrix.arch }}.zip axis_manager/bin/tman
          zip -vr axis_packages-linux-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ matrix.arch }}.zip \
            axis_packages/system/axis_runtime \
            axis_packages/system/axis_runtime_go \
            axis_packages/system/axis_runtime_python \
            axis_packages/extension/default_extension_cpp \
            axis_packages/extension/default_extension_go \
            axis_packages/extension/default_extension_python \
            axis_packages/extension/default_async_extension_python \
            axis_packages/addon_loader/python_addon_loader

      - name: Publish to release assets
        uses: softprops/action-gh-release@v2
        if: matrix.arch == 'x64' && startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            out/linux/x64/tman-linux-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ matrix.arch }}.zip
            out/linux/x64/axis_packages-linux-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ matrix.arch }}.zip

      - name: Publish release to APTIMA cloud store
        if: ${{ matrix.arch == 'x64' && startsWith(github.ref, 'refs/tags/') && matrix.compiler == 'gcc' && matrix.build_type == 'release' && matrix.arch == 'x64' }}
        run: |
          TMAN_BIN=$(pwd)/out/linux/x64/axis_manager/bin/tman

          cd out/linux/x64/axis_packages
          ARRAY=(
            "system/axis_runtime"
            "system/axis_runtime_go"
            "system/axis_runtime_python"
            "extension/default_extension_cpp"
            "extension/default_extension_go"
            "extension/default_extension_python"
            "extension/default_async_extension_python"
            "addon_loader/python_addon_loader"
          )

          for item in "${ARRAY[@]}"; do
            echo $item
            cd $item
            ${TMAN_BIN} --verbose --user-token ${{ secrets.axis_CLOUD_STORE }} publish
            cd -
          done
        shell: bash
